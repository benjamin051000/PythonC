// Terminals

TYPE: "int" | "float" | "char"

END_STMT: ";"

// Two-operand operators (left and right sides)
// TODO order of operations
ARITH_OP: "+" | "-" | "*" | "/" | "%"
RELATIONAL_OP: "==" | "!=" | "<" | ">" | "<=" | ">="
LOGICAL_OP: "&&" | "||" | "!"
BITWISE_OP: "|" | "&" | "^" | "<<" | ">>"
ASSIGN_OP: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|="

// General Terminal for all Left-Right operators
LR_OPERATOR: ARITH_OP | RELATIONAL_OP | LOGICAL_OP | BITWISE_OP

// Rules
var_decl: TYPE " " VAR_NAME END_STMT

var_assign: VAR_NAME ASSIGN_OP expression END_STMT

var_compound_decl_assign: TYPE " " var_assign

// expressions can be anything. The compiler will determine whether the rvalue is valid.
expression: ESCAPED_STRING | SIGNED_INT | SIGNED_NUMBER | VAR_NAME |  (expression LR_OPERATOR expression)

// A statement could be one of many things.
stmt: var_decl
    | var_assign
    | var_compound_decl_assign
    | expression END_STMT  // Why this is in ANSI C? Who knows.
    | END_STMT

// Top-level: C files contain multiple statements.
start: stmt*

%import common (WS, NEWLINE, C_COMMENT, CPP_COMMENT) // For ignores
%ignore WS  // Ignore general whitespace
%ignore C_COMMENT // Ignore /* comments like this */
%ignore CPP_COMMENT  // Ignore // inline comments like this

// Other terminals utilized above
%import common (ESCAPED_STRING, SIGNED_INT, SIGNED_NUMBER)
%import common.CNAME -> VAR_NAME  // C variable naming convention
